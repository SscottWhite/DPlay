<view class="getApp">
   {{First}}
</view>

<!--视图层
disable-scroll     Boolean  false   是否阻止区域内滚动页面
hover-class        String           点击时添加的样式类
hover-start-time   Number           按住多久后出现点击状态，单位毫秒
hover-stay-time    Number           松开后点击状态保留时间，单位毫秒
hidden             boolean  false   是否隐藏
class              String           自定义样式名
style              String           内联样式
animation                           用于动画，详见 dd.createAnimation
onTap             EventHandle       点击
onTouchStart      EventHandle       触摸动作开始
onTouchMove       EventHandle       触摸后移动
onTouchEnd        EventHandle       触摸动作结束
onTouchCancel     EventHandle       触摸动作被打断，如来电提醒，弹窗
onLongTap         EventHandle       长按 500ms 之后触发，触发了长按事件后进行移动将不会触发屏幕的滚动
-->
<view class="view-class"  hover-class="view-hover-class" style="background-color:red">
    {{Second}}
</view>


<!-- 滑动模块
indicator-dots     	    Boolean	  false	  是否显示指示点
indicator-color	        Color	    rgba(0, 0, 0, .3)	指示点颜色
indicator-active-color  Color  	  #000	当前选中的指示点颜色
autoplay	              Boolean	  false	是否自动切换
current                	Number	  0	    当前页面的 index
duration              	Number	  500(ms)	滑动动画时长
interval              	Number	  5000(ms)	自动切换时间间隔
circular               	Boolean	  false 	是否启用无限滑动
vertical              	Boolean	  false 	滑动方向是否为纵向
onChange	              Function	否	 current 改变时会触发，
                       事件新增内容****event.detail = {current: current}
-->
<swiper indicator-dots="{{true}}"  class="swiper-class">
  <block a:for="{{['#4A90E2','#F5A623']}}">
    <!--swiper-item只包含在这个里面-->
    <swiper-item >
      <view style="background-color: {{item}};width:100%;height:300rpx"/>
    </swiper-item>
  </block>
</swiper>

<!--滚动模块
class             String  外部样式名
style             String  内联样式名
scroll-x          Boolean false   是否允许横向滚动
scroll-y          Boolean false   是否允许纵向滚动
upper-threshold   Number  50 距顶部/左边多少距离时（px）触发
lower-threshold   Number  50 距底部/右边多少距离时（px）触发
scroll-top        Number  竖向滚动条位置
scroll-left       Number  横向滚动条位置
scroll-into-view  String  值为某个子元素的 id，滚动到该元素，元素顶部对齐滚动区域顶部
scroll-with-animation    Booleanfalse   是否在设置滚动条位置时使用动画过渡
onScrollToUpper  EventHandle  滚动到顶部/左边时触发
onScrollToLower  EventHandle  滚动到底部/右边时触发
onScroll         EventHandle  滚动时触发  
              事件新增内容****event.detail = {scrollLeft, scrollTop, scrollHeight, scrollWidth, deltaX, deltaY}


Tips
（1）scroll-into-view 的优先级高于 scroll-top
（2）在滚动 scroll-view 时会阻止页面回弹，所以在 scroll-view 中滚动，是无法触发 onPullDownRefresh
（3）使用竖向滚动时，需要给一个固定高度，通过 acss 设置 height。
-->
<scroll-view class="scroll-view-class" scroll-y="true" onScrollToUpper="scrollupper">
    <image mode="scaleToFill" src="image/icon_biz.png"/>
    <image mode="scaleToFill" src="image/icon_API_HL.png"/>
</scroll-view>

<!--
selectable Boolean false 是否可选
class      String        样式名
style      String        内联样式
-->
<text class="text-class" selectable="true">
  text
</text>

<!--
type   String         icon 类型，有效值： 
                info, warn, waiting, cancel, download, search, clear, success, success_no_circle
size   Number  23    icon 大小，单位px
color  Color         icon 颜色，同 css 的 color
-->
<icon class="icon-class" size="12px" type="success"></icon>

<!--
percent       Float            百分比(0~100)
show-info     Boolean  false   在右侧显示百分比值
stroke-width  Number   6       线的粗细，单位 px
activeColor   Color    #09BB07 已选择的进度条颜色
backgroundColor Color          未选择的进度条颜色 
active        Boolean  false   从左往右是否进行加载动画
-->
<progress show-info="{{true}}" percent="{{90}}" class="progress-class">
   progress
</progress>

<!--
size       String    default   有效值 default, mini
open-type  String         开放能力(1.1.0) 
                          share  触发自定义分享，可使用 canIUse('button.open-type.share') 判断
type       String    default  按钮的样式类型，有效值 primary, default, warn
plain      Boolean   false     是否镂空
disabled   Boolean   false     是否禁用
loading    Boolean   false     按钮文字前是否带 loading 图标
onTap      EventHandle         点击
form-type  String              有效值：submit, reset，用于表单组件，点击分别会触发 submit/reset 事件
hover-class  String  (默认值)button-hover    按钮按下去的样式类。hover-class="none" 时表示没有点击态效果
                      button-hover 默认为 {background-color: rgba(0, 0, 0, 0.1); opacity: 0.7;}
hover-start-time  Number  20    按住后多少时间后出现点击状态，单位毫秒
hover-stay-time   Number  70     手指松开后点击状态保留时间，单位毫秒
-->
<button   class="button-class" size="default" type="primary" plain="false" loading="true" hover-class="hoverclass">
  Button
</button>

<!--
表单，用于将组件内的用户输入的 <textarea>、 <switch/>、 <input/> 、
  <checkbox-group/>、<slider/>、<radio-group/>、<picker/> 等组件提交。

当点击 form 表单中 formType 为 submit 的 button 组件时，会将表单组件中的 value 值进行提交，
需要在表单组件中加上 name 来作为 key。

onSubmit EventHandle  携带 form 中的数据触发 submit 事件，
                event.detail = {value : {'name': 'value'}  }
onReset  EventHandle  表单重置时会触发 reset 事件
class    String       外部样式名
style    String       内联样式
-->
<form class="form-class" onSubmit="onmit" onReset="onRe"> 
  <view class="section section_gap">
    <view class="section__title">switch</view>
    <switch name="switch"/>
  </view>
  <view class="section section_gap">
    <view class="section__title">slider</view>
    <slider name="slider" show-value ></slider>
  </view>
  <view class="section">
    <view class="section__title">input</view>
    <input name="input" placeholder="please input here" />
  </view>
  <view class="section section_gap">
    <view class="section__title">radio</view>
    <radio-group name="radio-group">
      <label><radio value="radio1"/>radio1</label>
      <label><radio value="radio2"/>radio2</label>
    </radio-group>
  </view>
  <view class="section section_gap">
    <view class="section__title">checkbox</view>
    <checkbox-group name="checkbox">
      <label><checkbox value="checkbox1"/>checkbox1</label>
      <label><checkbox value="checkbox2"/>checkbox2</label>
    </checkbox-group>
  </view>
  <view class="form-view-class">
    <button  form-type="submit">提交</button>
    <button  form-type="reset">取消</button>
  </view>
</form>

<!--
Label 可以用来改进表单组件的可用性，使用 for 属性找到对应组件的 id，或者将组件放在该标签下，当点击时，就会聚焦对应的组件。
for 优先级高于内部组件，内部有多个组件的时候默认触发第一个组件。
目前可以绑定的控件有：<checkbox/>, <radio/>, <input/>, <textarea/>

for    String  绑定组件的 id
class  String  外部样式
style  String  内联样式
-->
<label>
  Label
  <checkbox value="aaa"/>
  <radio value="aaaa"/>
  <input placeholder="Input" />
  <textarea placeholder="textarea"></textarea>
</label>

<!--
value   String         初始内容
name    String         组件名字，用于表单提交获取数据
class   String         外部样式名
style   String         内联样式
type    String   text    input 的类型，有效值：text、search
password    Boolean  false  是否是密码类型
placeholder String          占位符  
disabled    Boolean  false  是否禁用 
maxlength   Number   140    最大长度
onInput     EventHandle     键盘输入时触发input事件，event.detail = {value: value}
onConfirm   EventHandle     点击键盘完成时触发，event.detail = {value: value}
onFocus     EventHandle     聚焦时触发，event.detail = {value: value}
onBlur      EventHandle     失去焦点时触发，event.detail = {value: value}
-->
<input placeholder="Input" />


<!--
name          String    组件名字，用于表单提交获取数据
value         String    初始内容
placeholder   String    占位符
class         String    样式名
style         String    内联样式
disabled      Boolean   false    是否禁用
maxlength     Number    140      最大长度，当设置为-1时不限制最大长度
focus         Boolean   false    获取焦点
auto-height   Boolean   false    是否自动增高
onInput       EventHandle   
键盘输入时触发，event.detail = {value: value}，可以直接 return 一个字符串以替换输入框的内容
onFocus       EventHandle
输入框聚焦时触发 event.detail = {value: value}
onBlur        EventHandle
输入框失去焦点时触发，event.detail = {value: value}
onConfirm     EventHandle
点击完成时触发，event.detail = {value: value}
-->
<textarea placeholder="Input multiple lines"></textarea>

<!--
radio-group:
onChange   EventHandle    选中项发生变化时触发，event.detail = {value: 选中项radio的value}
name       String         组件名字，用于表单提交获取数据

radio:
value String 组件值，选中时 change 事件会携带的 value
checked Boolean false 当前是否选中
disabled Boolean false 是否禁用
-->
<radio-group class="radio-group-class">
  <label a:for="{{items}}" onTap="radioGroupTap">
    <radio class="single-radio-class" value="{{item.value}}" checked="{{item.checked}}"/>{{item.name}}
  </label>
</radio-group>


<!--
checkbox-group:
name     String       组件名字，用于表单提交获取数据
onChange EventHandle  选中项发生改变时触发，detail = {value: 选中的checkbox项value的值}

checkbox:
value     String           组件值，选中时 change 事件会携带的 value
checked   Boolean  false   当前是否选中，可用来设置默认选中
disabled  Boolean  false   是否禁用
onChange  EventHandle     组件发生改变时触发，detail = {value: 该 checkbox 是否 checked}
-->
<checkbox-group class="checkbox-group-class">
  <!--  <label a:for="{{[{value:'spring', label:'Spring', checked:true}, {value:'summer', label:'Summer'}]}}">-->
  <label a:for="{{items}}"> 
    <checkbox class="checkbo" value="{{item.value}}" checked="{{item.checked}}"/>{{item.name}}
  </label>
</checkbox-group>

<!--
name     String    组件名字，用于表单提交获取数据
checked  Boolean   是否选中
disabled Boolean   是否禁用
color    String    组件颜色
onChange EventHandle  checked   改变时触发，event.detail={ value:checked}
-->
<switch name="switch-name" checked="{{false}}" class="switch-class"/>



<!--
name       String       组件名字，用于表单提交获取数据
min        Number   0   最小值
max        Number  100  最大值
step       Number   1   步长，值必须大于 0，并可被(max - min)整除
disabled   Boolean false  是否禁用
value      Number   0    当前取值
show-value Boolean false   是否显示当前value
activeColor      String   #108ee9  已选择的颜色
backgroundColor  String   #ddd  背景条的颜色
trackSize   Number   4  轨道线条高度
handleSize  Number  22  滑块大小
handleColor     String   #fff   滑块填充色
onChange   EventHandle   完成一次拖动后触发，event.detail = {value: value}
-->
<!--<slider value="20" min="1" max="100" step="1"></slider>-->
<slider value="33" onChange="sliderchange" min="25" max="50" show-value
    backgroundColor="#FFAA00" activeColor="#00aaee" trackSize="2" handleSize="6" handleColor="blue" />



<!--
value           Number       Array 数字表示 picker-view-column 中对应的 index （从 0 开始）
indicatorStyle  String       选中框样式
onChange        EventHandle  滚动选择value
                      改变时触发，event.detail = {value: value}；value为数组，
                      表示 picker-view 内的 picker-view-column index 索引，从 0 开始
-->
<picker-view class="picker-view-class"> 
  <picker-view-column>
    <view>2013</view>
    <view>2014</view>
  </picker-view-column>
  <picker-view-column>
    <view>Spring</view>
    <view>Summer</view>
  </picker-view-column>
</picker-view>    

<!--
range     	String[] / Object[]	[]	    String[] 时表示可选择的字符串列表 Object[] 时需指定 range-key 表示可选择的字段
range-key	  String		 当 range 是一个 Object[] 时，通过 range-key 来指定 Object 中 key 的值作为选择器显示内容
value	      Number		表示选择了 range 中的第几个（下标从 0 开始）
onChange	  EventHandle		value 改变时触发，event.detail = {value: value}
disabled	  Boolean	      false	   是否禁用
-->
<picker onChange="onchange" range="{{list}}" range-key="name" value="{{index}}">
  <view>
    <!--其实是上面的index的值通过onchange方法赋值到了listIndex,获取了这个name-->
      {{list[listIndex].name}}
  </view>
</picker>




<!--
hover-class       String   none     点击时附加的类
hover-start-time  Number   按住多长时间后出现点击状态，单位毫秒
hover-stay-time   Number   手指松开后点击状态保留时间，单位毫秒
url               String   应用内的跳转链接
open-type         String   navigate   跳转方式

open-type 有效值：
navigate      对应 dd.navigateTo 的功能
redirect      对应 dd.redirectTo 的功能
switchTab     对应 dd.switchTab 的功能
navigateBack  对应 dd.navigateBack 的功能
-->
<navigator url="/pages/dPlay/dPlay" open-type="redirect" >Navigate</navigator>